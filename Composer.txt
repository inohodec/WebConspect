локальная установка

1) php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
2) php -r "if (hash_file('sha384', 'composer-setup.php') ===  '756890a4488ce9024fc62c56153228907f1545c228516cbf63f885e036d37e9a59d27d63f46af1d4d07ee0f76181c7d3') { echo 'Installer verified'; } else { echo 'Installer 4corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
3) php composer-setup.php
4) php -r "unlink('composer-setup.php');"

1) Download the installer to the current directory
2) Verify the installer SHA-384, which you can also cross-check here
3) Run the installer
4) Remove the installer

------------------------------------------------------------------

глобальная установка

Для того чтобы установить Composer глобально, PHAR-архив следует переименовать
в удобную вам форму, например, просто в composer. При этом файлу должны быть вы-
ставлены права доступа на выполнение, например, 0755. Для того чтобы файл был дос-
тупен в любой точке файловой системы, его следует разместить в папке /user/local/bin:

mv composer.phar /usr/local/bin/composer
composer --version

composer init инициализирует папку и создаёт composer.json

------------------------------------------------------------------
установка(локальная)
composer require tightenco/collect

установка(глобальная)
composer global require tightenco/collect


установка из composer.json
производим данное действие после клонирования проэкта, когда composer.json 
загружен, а соответственно самих библиотек нет

установка пакетов из composer.json
composer install                глобально установленный composer
php composer.phar install       локально установленный composer
------------------------------------------------------------------

Обновление компонента
composer update phploc/phploc
------------------------------------------------------------------

АВТОЗАГРУЗКА ФАЙЛОВ

1 ОБЯЗАТЕЛЬНО ПОДКЛЮЧАЕМ НАШ ФАЙЛ autoload.php из папки vendor
    equire_once __DIR__ . '/vendor/autoload.php';

    ----После каждого редактирования composer.json выполняет обновление компосера
    composer dump-autoload -o
    или если composer стоит локально, тогда 
    php composer.phar dump-autoload -o

2 Для автозагрузки наших классов по стандарту PSR-0 добавляем в composer.json в корне проэкта
    {
        "autoload": {
            "psr-0": {
                "VendorName\\NameSpace": "src",

                "MyPhpLab\\Agregator": "src"            //an example
            }
        }
    }
    это значит, что файл с необходимым классом должен лежать в src\MyPhpLab\Agregator и иметь такое же пространство имён,
    так же название класса внутри файла должно совпадать с назанием файла, к примеру new MyPhpLab\Agregator\MyClass(); 
    должен соответствовать файлу src\MyPhpLab\Agregator\MyClass.php
    В дальнейшем подпапки добавлять не нужно, все делается автоматически, главное соблюдать вышеописанный принцип

        пример:
            --------composer.json------------- 
            "psr-0": {
                "MyPhpLab\\Library": "src/"
            }
            ---------catalog structure--------
            d - в начале означает, что это каталог
            d--src--
                   |d--MyPhpLab--
                                |d--Library--|
                                             |d--SubFolder-------|
                                             |CollectUsers.php   |
                                                                |CollectGroups.php 
            ---------index.php----------------                   
            $w = new MyPhpLab\Library\CollectUsers();
            $a = new MyPhpLab\Library\SubFolder\CollectGroups();
            echo $w->getNamespace() . PHP_EOL;
            echo $a->getNamespace() . PHP_EOL; 

3 Для автозагрузки наших классов по стандарту PSR-4 добавляем в composer.json в корне проэкта
и обновляем конфигурацию. Принято использовать этот формат!!! Название класса внутри файла должно совпадать с назанием файла
    пример:
        ---------composer.json------------- 
        "autoload": {
            "psr-4": {
                "MyPhpLab\\Agregator\\": "src"        //важно сохранять синтаксис левой строки 
        }
        ---------catalog structure--------
            d - в начале означает, что это каталог
            d--src--
                   |d--SubFolder-------|
                   |CollectUsers.php   |
                                       |CollectGroups.php 

        ---------index.php----------------                   
            $w = new MyPhpLab\Library\CollectUsers();
            $a = new MyPhpLab\Library\SubFolder\CollectGroups();
            echo $w->getNamespace() . PHP_EOL;
            echo $a->getNamespace() . PHP_EOL;

4 Автозагрузка classmap, сканирует указанные папки и все, что находится в них, подгружая найденные фвйлы с классами
    пример, никакие пути при этом можно не соблюдать
        -----composer.json
        "autoload": {
            "classmap": ["src", "lib"]
           }
        ---------catalog structure--------
            d--src--|
                    |d--SubFolder-------|                       
                    |CollectUsers.php   |                       //namespace MyPhpLab\Library;
                                        |CollectGroups.php      //namespace MyPhpLab\Library;
        ---------index.php----------------
        $w = new MyPhpLab\Library\SomeClass();
        $a = new MyPhpLab\Library\SomeAnotherClass();

5 Автозагрузка файлов по отдельности
    "autoload": {
        "files": ["src/Pairs.php", "src/Lists.php"]
    }





