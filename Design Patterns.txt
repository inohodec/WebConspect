                        Strategy

Паттерн стратегия - определяет семейство алгоритмов, инкапсулирует их и предоставляет возможность их взаимозаменяемости



                        Observer

Паттерн Наблюдатель - реализует отношение "один - ко многим", в следствии изменения одного "наблюдаемого субъекта", остальные 
"зависимые" оповещаются об его изменении автоматически
    - отношение между объектами - "один-ко-многим"
    - субъекты обновляют наблюдателей через единый интерфейс
    - субъект ничего не знает о наблюдателях - кроме того, что они реализуют интерфейс Observer
    - возможен как запрос, так и активная доставка данных от субъекта(запрос считается более правильным)
    - работа кода не должна зависить от порядка оповещения наблюдателей

                        
                        Decorator
    
Паттерн декоратор - динамически наделяет "декорируемый" объект новой функциональностью и является гибкой альтернативой 
наследованию(субклассированию) в области расширения функциональности.
    - паттерн Decorator предоставляет альтернативу субклассированию в области расширения функциональности
    - тип декораторов соответствует типу декорируемых компонентов(единый интерфейс)
    - декораторы изменяют поведение компонентов, добавляя новую функциональностью
    - компонент может декорироваться любым количеством декораторов

                        
                        Factory Method
    
Фабричный метод - определяет интерфейс создания объектов, предоставляя субклассам возможность выбора классов созаваемых
экземпляров. То есть, фабричный метод делегирует операцию создания экземпляра субклассам. Проповедует принцип 
"инверсии зависимостей", когда "высокоуровневые" компоненты не зависят от "низкоуровневых", а вместо этого те и другие 
зависят от абстракции  
    - основан на наследовании: создание субъектов делегируется субклассам, реализующим фабричный метод для создания объектов
    - все фабричные паттерны обеспечивают слабую связанность за счет сокращения зависимости приложения от конкретных классов
    - Паттерн полезен для отделения клиентского кода от создания экземпляров конкретных классов и в тех ситуациях, когда
      точный состав всех конкретных классов неизвестен заранее
                        
                        
                        Abstract Factory

Абстрактная фабрика - предоставляет интерфейс для создания взаимосвязанных или взаимозависимых объектов без указания их 
конкретных классов
    - основана на композиции: создание объектов реализуется в методе, доступ к которому осуществляется через интерфейс фабрики
    - клиент Абстрактной фабрики не знает как создаются объекты, он лишь знает как они взаимодействуют вместе
    - все фабричные паттерны обеспечивают слабую связанность за счет сокращения зависимости приложения от конкретных классов
    - Нужно использовать при создании семейств продуктов, в случае когда необходимо обеспечить согласованность создаваемых объектов


                       
                        Singletone

Паттерн Одиночка - гарантирует, что класс имее всего один экземпляр и предоставляет глобальную точку доступа к этому экземпляру


                        
                        Command

Паттерн Команда - инкапсулирует запрос в виде объекта, делая возможным параметризацию клиентских объектов(разные клиенты для команды) 
с другими запросами, организацию очереди, а также регистрацию запросов, а также позволяет реализовать отмену действия.
    - паттерн отделяет сторону выдающую запрос(клиент), от объекта выполняющего операцию(инициатор), сам запрос является командой
      и содержит в себе ссылку на получателя который фактически выполняет все действия.
    - инициатор вызывает метод execute() объекта команды, что приводит к выполнению соответствующих операций с получателем
    - иногда получателя может и не быть и объект команды выполняет все действия сама
    - возможна параметризация инициаторов командами(даже динамическая)
    - также возможна реализация отмены, восстанавливающая объект в состояние до последнего вызова execute()
    - возможно создание макрокоманд(объект Command содержащий в себе другие объекты Command) с реализацией отмены
    - иногда встречаются "умные" команды, которые не делегируют выполнение получателю, а выполняют действия сами 



                        Adapter

Паттерн Адаптер - преобразует интерфейс класса к другому интерфейсу, на который расчитан клиент. Он обеспечивает возможность 
взаимодействия классов которые в обычных условиях не могут работать вместе из-за несоответствия интерфейсов. (паттерн используется 
для упрощения интерфейса)
    - используем если нужно использовать класс с неподходящим интерфейсом
    - объем работы по реализации адаптера зависит от сложности целевого интерфейса
    


                        Facade

Предоставляет унифицированный интерфейс к группе интерфейсов подсистемы. Фасад определяет высокоуровневый
интерфейс упрощающий взаимодействие с этой подсистемой (паттерн используется для упрощения интерфейса).
    - Паттерн не только упрощает интерфейс, но и обеспечивает логическую изоляция клиента от подсистемы, состоящей
      из многих компонентов
    - основан на композиции и делегировании
    - для подсистемы можно реализовать несколько фасадов



                        Template Method

Паттерн Шаблонный метод - определяет скелет алгоритма предоставляя возможность реализации некоторых шагов субклассам.
Субклассы могут переопределять некоторые части алгоритма без изменения его структуры.
    - в шаблоне возможна реализация "перехватчиков", для необязательных частей аллгоритма.
    - перехватчики не делают ничего или определяют поведение по умолчанию в абстрактном классе, но могут переопределяться в 
      субклассе
    - можно объявлять Шаблонный метод final для того что бы субклассы не могли переопределить его 
    - каждый субкласс должен реализовывать полный набор абстрактных методов и предоставлять полную реализацию неопределенных шагов
      алгоритма шаблонного метода
    - абстрактный класс шаблонного метода может определять конкретные методы, абстрактные методы и перехватчики.

    В отличии от Стратегии которая использует делегирование и каждый новый класс реализующий интерфейс алгоритма, реализует 
    алгоритм полностью и исключает повторное использование кода, паттерн Шаблонный метод не допускает дублирование кода и субклассы 
    реализуют лишь отличающиеся стадии алгоритма