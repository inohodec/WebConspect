<?php 
#====================Пространства имен=========================

/*
	Выполняют 2 важные вещи:
		1 - Устраняют конфликты имен между классами, константами, функциями. Это актуально, если код большой и его пишут несколько человек и могут возникнуть одинаковые имена. Так же актуально для сторонних расширений, т.к. в них могут попасться имена схожие с именами в основной программе.

		2 - Возможность создавать псевдонимы (или сокращения) для Ну_Очень_Длинных_Имен, чтобы облегчить первую проблему и улучшить читаемость исходного кода.
	По сути это префиксы, которые мы добавляем не к каждому классу, ф-ции т.д. , а выносим как-бы "наверх"
*/	
//мы имеем 3 файла и структуру:

//	main.php (главный файл вывода инфы)
//	utils (папка для утилит)
//			|
//			some_folders_and_files(какие-то файлы утилит и папки)
//			profile(папка содержащая утилиты профиля)
//				|
//				address.php (возвращает адрес)
//				hobbies.php (возвращает хобби) 

//====== файл 1 address.php 

namespace utils\profile\address;//имя выбрали одним с путем к файлу, для того что-бы его было просто найти, но это не обязательно(можно хоть просто 1 слово vasya написать)

class UserInfo {
	public function getInfo()	{	echo __NAMESPACE__;	}
}

//====== файл 2 hobbies.php 

namespace utils\profile\hobbies;

class UserInfo {
	public function getInfo()	{	echo __NAMESPACE__;	}
}

//====== файл 3 main.php 
require_once "utils\profile\address.php"
require_once "utils\profile\hobbies.php"

//в обоих файлах есть одинаковые классы UserInfo и при обращении к ним будет ошибка, но мы можем избежать этого несколькими путями(шапка с рекваер остаёться всегда, но меняются код в примерах):
	
	#------- №1 ------
$obj1 = new utils\profile\address\UserInfo();//поиск начинается с текужей папки(но т.к. main находится в корне пространства имен то все ОК и мы находим инфу)
$obj2 = new \utils\profile\hobbies\UserInfo();//поиск начинается с корня
	
	#------- №2 ------
use utils\profile\address\UserInfo as adInfo; //создаем псевдоним adInfo непосредственно для класса UserInfo
use utils\profile\hobbies as hobbie;//создаем псевдоним для всего док-та hobbies.php и если в нем будут другие классы, то мы обращаемся к ним hobbie\class_name

$obj1 = new adInfo();
$obj2 = new hobbie\UserInfo();

//============ВАЖНО=============================
/*
	По сути 
*/
	namespace SomeDir\Utils;
	class User {
		//code...
	}
/*
создает класс с именем SomeDir\Utils\User, который мы и вызываем далее  $obj = new SomeDir\Utils\User()
а use SomeDir\Utils;(Тоже что и  use SomeDir\Utils as Utils) создает псевдоним Utils и мы пишем 
$obj = new Utils\User();
*/