ssh name@address:port           -   ssh max@192.168.0.181:25

в случае когда получаем Connection refused
проверяем запущена ли shh служба на сервере

sudo service ssh status

если ее нет, то устанавливаем:
sudo apt install openssh-server -   по идее автоматом прописывается в автозагрузку

systemctl start sshd            -   старт shh службы
sudo systemctl enable sshd      -   будет стартовать при запуске системы

если все ок, а соединение все равно отклоняется

РЕШЕНИЕ: РАЗРЕШИТЬ SSH-ПОДКЛЮЧЕНИЯ ЧЕРЕЗ БРАНДМАУЭР
Чтобы решить проблему, о которой мы упоминали выше, вы можете использовать ufw 
(Uncomplicated Firewall - несложный брандмауэр), инструмент интерфейса командной 
строки для управления конфигурацией брандмауэра.

Введите следующую команду в окне терминала, чтобы разрешить SSH-соединения:

sudo ufw allow ssh


ПОРТ SSH ЗАКРЫТ

Чтобы вывести список всех прослушивающих портов, запустите:

sudo lsof -i -n -P | grep LISTEN

...
sshd      4738            root    3u  IPv4  62498      0t0  TCP *:22 (LISTEN)
sshd      4738            root    4u  IPv6  62500      0t0  TCP *:22 (LISTEN)   все ОК
...

Кроме того, вы можете проверить, открыт ли конкретный порт, в данном случае порт 22:

sudo lsof -i:22

Чтобы разрешить порту 22 слушать запросы, используйте команду iptables:

sudo iptables -A INPUT -p tcp --dport 22 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT


--------------------------------------------------------------------------------------------
файл с настройками ssh-client - /etc/ssh/ssh_config

файл с настройками ssh-server - /etc/ssh/sshd_config


ДОСТУП ТОЛЬКО ОПРЕДЕЛЕННОГО ПОЛЬЗОВАТЕЛЯ К SSH
Мы можем разрешить доступ к ssh только для определенного пользователя или группы. Для этого  добавьте строчки:

AllowUsers User1, User2, User3
AllowGroups Group1, Group2, Group3


ВЫПОЛНЕНИЕ X11 ПРИЛОЖЕНИЙ
добавьте такую строчку:

X11Forwarding yes


ВЫПОЛНИТЬ КОМАНДУ
Мы привыкли подключаться к удаленному серверу, а уже потом выполнять нужные команды, но на самом деле утилита ssh позволяет 
сразу выполнить нужную команду без открытия терминала удаленной машины. Например:

ssh user@host ls


БЕКАП НА УДАЛЕННЫЙ СЕРВЕР И ВОССТАНОВЛЕНИЕ
sudo dd if=/dev/sda | ssh user@host "dd of=sda.img"
sudo ssh user@host "dd if=sda.img" | dd of=/dev/sda


АУТЕНТИФИКАЦИЯ БЕЗ ПАРОЛЯ

создайте ключ(делаем на клиенте) командой:
ssh-keygen -t rsa

Во время создания ключа нужно будет ответить на несколько вопросов, расположение оставляйте по умолчанию, 
если хотите подключаться без пароля - поле Passphare тоже оставьте пустым.

копируем публичный ключ на сервер
ssh-copy-id -i ~/.ssh/id_rsa.pub user@host

ВЗЯТЬ ПАРОЛЬ ИЗ ЛОКАЛЬНОГО ФАЙЛА
ssh user@host < local_file.txt

СМОТРИМ НЕУДАЧНЫЕ ПОПЫТКИ ВХОДА SSH
cat /var/log/secure | grep "Failed password for"


ПЕРЕДАЧА ФАЙЛОВ ПО SSH
Кроме выполнения команд, можно копировать файлы по ssh. Для этого используется утилита scp. 
Просто укажите файл, который нужно передать, удаленный сервер и папку на сервере, вот:

$ scp /file_location/some_file.txt user@host:location/folder



полезная статья по ssh - https://losst.ru/kak-polzovatsya-ssh

*************************************************************************

Несколько ключей 
переходим в ~/.ssh/

ssh-keygen -t rsa
предложит указать другое имя
Generating public/private rsa key pair.
Enter file in which to save the key (/home/ostepan/.ssh/id_rsa): test_rsa   - создали ключ с именем test_rsa

ssh-add -l          - выводит список доступных ключей

Теперь нужно сообщить ssh о том, что для хоста к примеру github.com нужно использовать именно этот ключ. Редактируем файл ~/.ssh/config (если его нет, то создаём), дописываем туда

Host github.com
    IdentityFile ~/.ssh/id_rsa_github_com
Теперь для всех серверов будет использоваться дефолтный ключ (обычно он называется ~/.ssh/id_rsa), а именно для github.com - ~/.ssh/id_rsa_github_com.

Параноикам на заметку: можно для каждого сервера создать свою пару ключей (просто переопределив имя ключа в диалоге в ssh-keygen) и прописать конфигурацию для каждого сервера.

PS Можно использовать другой ключ без прописывания в конфиг. Для этого нужно воспользоваться параметром командной строки -i:

$ ssh -i ~/.ssh/id_rsa_github_com github.com
Ну конечно же github нас так никуда не пустит, так как не разрешает интерактивный режим. Но для своих собственных серверов это вполне можно использовать.


